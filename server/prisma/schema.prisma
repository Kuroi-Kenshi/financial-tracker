generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  name               String
  avatarPath         String               @default("default-avatar.png")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  balance            Float                @default(0)
  hashedRefreshToken String?
  UserBalance        UserBalance[]
  Expense            Expense[]
  Income             Income[]
  Investment         Investment[]
  ExpenseCategory    ExpenseCategory[]
  IncomeCategory     IncomeCategory[]
  InvestmentCategory InvestmentCategory[]
  Counterpart        Counterpart[]
  Debt               Debt[]
  Credit             Credit[]
  FinancialGoal      FinancialGoal[]
  BudgetPlan         BudgetPlan[]
}

model UserBalance {
  id         Int      @id @default(autoincrement())
  balance    Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int
}

model Currency {
  id            Int             @id @default(autoincrement())
  code          String          @unique
  name          String
  symbol        String
  Expense       Expense[]
  Income        Income[]
  Investment    Investment[]
  Credit        Credit[]
  Debt          Debt[]
  FinancialGoal FinancialGoal[]
  BudgetPlan    BudgetPlan[]
  UserBalance   UserBalance[]
}

model Expense {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  amount          Float
  date            DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  categoryExpense ExpenseCategory? @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  receipt         Receipt[]
  currency        Currency         @relation(fields: [currencyId], references: [id])
  currencyId      Int
}

model Receipt {
  id           Int      @id @default(autoincrement())
  originalName String
  fileName     String
  size         Int
  mimetype     String
  filePath     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Expense      Expense  @relation(fields: [expenseId], references: [id])
  expenseId    Int
}

model Income {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  amount         Float
  date           DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  categoryIncome IncomeCategory? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  currency       Currency        @relation(fields: [currencyId], references: [id])
  currencyId     Int
}

model Investment {
  id                 Int                 @id @default(autoincrement())
  name               String
  amount             Float
  date               DateTime
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id])
  userId             Int
  categoryInvestment InvestmentCategory? @relation(fields: [categoryId], references: [id])
  categoryId         Int?
  currency           Currency            @relation(fields: [currencyId], references: [id])
  currencyId         Int
}

model ExpenseCategory {
  id          Int                         @id @default(autoincrement())
  name        String                      @unique
  color       String
  expenses    Expense[]
  user        User                        @relation(fields: [userId], references: [id])
  userId      Int
  budgetPlans BudgetPlanExpenseCategory[]
}

model IncomeCategory {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  color   String
  incomes Income[]
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
}

model InvestmentCategory {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  color       String
  investments Investment[]
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
}

model Counterpart {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  debt        Debt[]
  credit      Credit[]
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model Debt {
  id            Int                 @id @default(autoincrement())
  description   String?
  amount        Float
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  dueDate       DateTime?
  status        DebtAndCreditStatus
  totalPayments Float
  debtor        Counterpart         @relation(fields: [debtorId], references: [id])
  debtorId      Int
  user          User                @relation(fields: [userId], references: [id])
  userId        Int
  currency      Currency            @relation(fields: [currencyId], references: [id])
  currencyId    Int
}

model Credit {
  id            Int                 @id @default(autoincrement())
  description   String?
  amount        Float
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  dueDate       DateTime?
  status        DebtAndCreditStatus
  totalPayments Float
  creditor      Counterpart         @relation(fields: [creditorId], references: [id])
  creditorId    Int
  user          User                @relation(fields: [userId], references: [id])
  userId        Int
  currency      Currency            @relation(fields: [currencyId], references: [id])
  currencyId    Int
}

model FinancialGoal {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  amount      Float
  totalAmount Float
  deadline    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  currency    Currency @relation(fields: [currencyId], references: [id])
  currencyId  Int
}

model BudgetPlan {
  id                Int                         @id @default(autoincrement())
  name              String                      @unique
  description       String
  amount            Float
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  user              User                        @relation(fields: [userId], references: [id])
  userId            Int
  currency          Currency                    @relation(fields: [currencyId], references: [id])
  currencyId        Int
  expenseCategories BudgetPlanExpenseCategory[]
}

model BudgetPlanExpenseCategory {
  expenseCategory   ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])
  expenseCategoryId Int
  budgetPlan        BudgetPlan      @relation(fields: [budgetPlanId], references: [id])
  budgetPlanId      Int

  @@id([expenseCategoryId, budgetPlanId])
}

enum DebtAndCreditStatus {
  ACTIVE
  PAID
  CANCELLED
}
